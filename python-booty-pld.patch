--- booty-0.93/bootloaderInfo.py	2007-12-07 20:19:40.000000000 +0200
+++ booty-0.93-pld/bootloaderInfo.py	2008-11-09 21:34:43.408407835 +0200
@@ -337,9 +337,7 @@
             initrd = booty.makeInitrd (kernelTag, instRoot)
 
             sl.addEntry("label", label)
-            if os.access (instRoot + initrd, os.R_OK):
-                sl.addEntry("initrd", "%sinitrd%s.img" %(self.kernelLocation,
-                                                         kernelTag))
+            sl.addEntry("initrd", initrd)
                 
             sl.addEntry("read-only")
 
@@ -760,7 +758,7 @@
         f.write('#          root %s\n' % self.grubbyPartitionName(bootDevs[0]))
         f.write("#          kernel %svmlinuz-version ro "
                 "root=/dev/%s\n" % (cfPath, rootDev))
-        f.write("#          initrd %sinitrd-version.img\n" % (cfPath))
+        f.write("#          initrd %sinitrd-version.gz\n" % (cfPath))
         f.write("#boot=/dev/%s\n" % (grubTarget))
 
         # get the default image to boot... we have to walk and find it
@@ -845,16 +843,14 @@
                     f.write(' %s' % self.args.get())
                 f.write('\n')
 
-                if os.access (instRoot + initrd, os.R_OK):
-                    f.write('\tmodule %sinitrd%s.img\n' % (cfPath, kernelTag))
+                f.write('\tmodule %sinitrd%s.gz\n' % (cfPath, kernelTag))
             else: # normal kernel
                 f.write('\tkernel %s ro%s' % (kernelFile, realroot))
                 if self.args.get():
                     f.write(' %s' % self.args.get())
                 f.write('\n')
 
-                if os.access (instRoot + initrd, os.R_OK):
-                    f.write('\tinitrd %sinitrd%s.img\n' % (cfPath, kernelTag))
+                f.write('\tinitrd %sinitrd%s.gz\n' % (cfPath, kernelTag))
 
         for (label, longlabel, device) in chainList:
             if ((not longlabel) or (longlabel == "")):
@@ -1262,9 +1258,8 @@
             initrd = booty.makeInitrd (kernelTag, instRoot)
 
             sl.addEntry("label", label)
-            if os.access (instRoot + initrd, os.R_OK):
-                sl.addEntry("initrd",
-                            "%sinitrd%s.img" %(self.kernelLocation, kernelTag))
+            sl.addEntry("initrd",
+                        "%sinitrd%s.gz" %(self.kernelLocation, kernelTag))
 
             sl.addEntry("read-only")
             sl.addEntry("root", '/dev/' + rootDev)
@@ -1358,9 +1353,8 @@
             initrd = booty.makeInitrd (kernelTag, instRoot)
             f.write('[%s]\n' % (label))
             f.write('\timage=%s\n' % (kernelFile))
-            if os.access (instRoot + initrd, os.R_OK):
-                f.write('\tramdisk=%sinitrd%s.img\n' %(self.kernelLocation,
-                                                     kernelTag))
+            f.write('\tramdisk=%sinitrd%s.gz\n' %(self.kernelLocation,
+                                                 kernelTag))
             realroot = getRootDevName(initrd, fsset, rootDev, instRoot)
             f.write('\tparameters="root=%s' %(realroot,))
             if bl.args.get():
@@ -1486,8 +1480,7 @@
 
             # See if we can come up with an initrd argument that exists
             initrd = booty.makeInitrd (kernelTag, instRoot)
-            if os.access(instRoot + initrd, os.R_OK):
-                f.write(" initrd=%sinitrd-%s.img" %(kernelPath, kernelTag))
+            f.write(" initrd=%sinitrd-%s.gz" %(kernelPath, kernelTag))
 
             realroot = getRootDevName(initrd, fsset, rootDevice, instRoot)
             f.write(" root=%s" %(realroot,))
@@ -1673,8 +1666,7 @@
             f.write("\tread-only\n")
 
             initrd = booty.makeInitrd(kernelTag, instRoot)
-            if os.access(instRoot + initrd, os.R_OK):
-                f.write("\tinitrd=%s/initrd%s.img\n" %(cfPath,kernelTag))
+            f.write("\tinitrd=%s/initrd%s.gz\n" %(cfPath,kernelTag))
 
             append = "%s" %(self.args.get(),)
 
@@ -1778,7 +1770,7 @@
         # write our command line files
         for (kernel, tag, kernelTag) in kernelList:
             cmdFile = "%scmdline-%s" %(self.kernelLocation, kernelTag)
-            initrd = "%sinitrd-%s.img" %(self.kernelLocation, kernelTag)
+            initrd = "%sinitrd-%s.gz" %(self.kernelLocation, kernelTag)
             realroot = getRootDevName(initrd, fsset, rootDevice, instRoot)
             f = open(instRoot + cmdFile, "w")
             f.write("ro root=%s" %(realroot,))
@@ -1874,13 +1866,13 @@
             # path for live cd only
             shutil.copy("%s/boot/vmlinuz-%s" %(instRoot, version),
                         "%s/boot/isolinux/vmlinuz" %(instRoot,))
-            shutil.copy("%s/boot/initrd-%s.img" %(instRoot, version),
-                        "%s/boot/isolinux/initrd.img" %(instRoot,))
+            shutil.copy("%s/boot/initrd-%s.gz" %(instRoot, version),
+                        "%s/boot/isolinux/initrd.gz" %(instRoot,))
             
             # FIXME: need to dtrt for xen kernels with multiboot com32 module
             f.write("label linux\n")
             f.write("\tkernel vmlinuz\n")
-            f.write("\tappend initrd=initrd.img,initlive.gz\n")
+            f.write("\tappend initrd=initrd.gz,initlive.gz\n")
             f.write("\n")
 
             break
@@ -1949,8 +1941,7 @@
             f.write("\tread-only\n")
 
             initrd = booty.makeInitrd(kernelTag, instRoot)
-            if os.access(instRoot + initrd, os.R_OK):
-                f.write("\tinitrd=%s/initrd%s.img\n" % (cfPath, kernelTag))
+            f.write("\tinitrd=%s/initrd%s.gz\n" % (cfPath, kernelTag))
 
             append = "%s" % (self.args.get(),)
 
@@ -2070,15 +2061,17 @@
 # returns a product name to use for the boot loader string
 # FIXME: this is based on the stuff from anaconda, but kind of crappy :-/
 def getProductName():
-    # try redhat-release first
-    if os.access("/etc/redhat-release", os.R_OK):
-        f = open("/etc/redhat-release", "r")
+    # try pld-release first
+    if os.access("/etc/pld-release", os.R_OK):
+        f = open("/etc/pld-release", "r")
         lines = f.readlines()
         f.close()
         for buf in lines:
-            relidx = buf.find(" release")
+            relidx = buf.find("PLD Linux")
             if relidx != -1:
-                return buf[:relidx]
+                # return 'PLD Linux (Ac)'
+                # return 'PLD Linux (Th)'
+                return buf[relidx:-1]
 
     if os.access("/tmp/product/.buildstamp", os.R_OK):
         path = "/tmp/product/.buildstamp"
@@ -2095,6 +2088,6 @@
             return lines[1][:-1]
 
     # fall back
-    return "Red Hat Linux"
+    return "PLD Linux"
         
             
--- booty-0.93/booty.py	2007-12-07 20:19:40.000000000 +0200
+++ booty-0.93-pld/booty.py	2008-11-09 21:34:43.408407835 +0200
@@ -194,9 +194,6 @@
         
         initrd = makeInitrd("-%s" % (newVersion,), "/")
 
-        if not os.access(initrd, os.R_OK):
-            initrd = None
-
         if imageType and imageType != defaultType:
             # linux-smp.linux-BOOT, etc
             label = "linux-"+imageType
@@ -276,7 +273,7 @@
     if rhpl.getArch() == 'ia64':
         initrd = "/boot/efi/EFI/redhat/initrd%s.img" % (kernelTag, )
     else:
-        initrd = "/boot/initrd%s.img" % (kernelTag, )
+        initrd = "/boot/initrd%s.gz" % (kernelTag, )
 
     return initrd
 
